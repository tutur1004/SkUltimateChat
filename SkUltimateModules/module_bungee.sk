options:
	prefix: SkUltimateChat
	prefix-msg: %{SkUltimateChat-commandes-prefix}%
	perms: perm.%{SkUltimateChat-permissions-prefix}%
#

#	Redis request 1: type, 2: server-name, 3: message-id

websocket server "SkUltimateChat":
	on message:
		set {_request::*} to "%event-string%" split at "&|splitredis|&"
		if {_request::1} is "LastSQL":
			if {_request::2} is not "%{{@prefix}-server-name}%":
				set {_sql} to "SELECT * FROM `SkUltimateChat` WHERE `id` = '%{_request::3}%'"
				execute unsafe {_sql} in {{@prefix}-sql} and store the result in {_id::*}
				if "%{_output::types::*}%" is "MessageGlobal":
					set {_playername} to "%{{@prefix}.playername.%{_output::joueur1::*}%}%"
					set {_id} to "%{_output::id::*}%" parsed as int
					loop all players:
						SendMessage(loop-player, "%{_playername}%", "%{_output::message::*}%", {_id})
				else if "%{_output::types::*}%" is "MessagePrive":
					set {_sender} to "%{_output::joueur1::*}%" parsed as offline player
					set {_reciever} to "%{_output::joueur2::*}%" parsed as offline player
					SendPrivateMessage({_reciever}, {_sender}, false, "%{_output::message::*}%")


on load:
	set {{@prefix}.bungee.socket-port} to {{@prefix}.bungee.socket-port} parsed as int
	if server socket is open at host localhost port {{@prefix}.bungee.socket-port} with timeout of 2s:
		set {{@prefix}.Socket} to new websocket "SkUltimateChat" connected to uri "wss://localhost:%{{@prefix}.bungee.socket-port}%"
		send "[CHAT] connecté au réseau SkUltimateChat" to console
	else:
		start websocket server "SkUltimateChat" at port {{@prefix}.bungee.socket-port}
		set {{@prefix}.Socket} to new websocket "SkUltimateChat" connected to uri "wss://localhost:%{{@prefix}.bungee.socket-port}%"
		send "[CHAT] connecté au réseau SkUltimateChat" to console

evt "send new SQL by id":
	websocket send "LastSQL&|splitredis|&%{{@prefix}-server-name}%&|splitredis|&%event-number%" over channel "SkUltimateChat" through {{@prefix}.Socket}
#

